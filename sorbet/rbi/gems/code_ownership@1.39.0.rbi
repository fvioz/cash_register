# typed: true

# DO NOT EDIT MANUALLY
# This is an autogenerated file for types exported from the `code_ownership` gem.
# Please instead update this file by running `bin/tapioca gem code_ownership`.


module CodeOwnership
  private

  # source://code_ownership//lib/code_ownership.rb#129
  sig do
    params(
      backtrace: T.nilable(T::Array[::String])
    ).returns(T::Enumerable[[T.nilable(::CodeTeams::Team), ::String]])
  end
  def backtrace_with_ownership(backtrace); end

  # Given a backtrace from either `Exception#backtrace` or `caller`, find the
  # first owned file in it, useful for figuring out which file is being blamed.
  #
  # source://code_ownership//lib/code_ownership.rb#118
  sig do
    params(
      backtrace: T.nilable(T::Array[::String]),
      excluded_teams: T::Array[::CodeTeams::Team]
    ).returns(T.nilable([::CodeTeams::Team, ::String]))
  end
  def first_owned_file_for_backtrace(backtrace, excluded_teams: T.unsafe(nil)); end

  # Given a backtrace from either `Exception#backtrace` or `caller`, find the
  # first line that corresponds to a file with assigned ownership
  #
  # source://code_ownership//lib/code_ownership.rb#111
  sig do
    params(
      backtrace: T.nilable(T::Array[::String]),
      excluded_teams: T::Array[::CodeTeams::Team]
    ).returns(T.nilable(::CodeTeams::Team))
  end
  def for_backtrace(backtrace, excluded_teams: T.unsafe(nil)); end

  # source://code_ownership//lib/code_ownership.rb#172
  sig { params(klass: T.nilable(T.any(::Module, T::Class[T.anything]))).returns(T.nilable(::CodeTeams::Team)) }
  def for_class(klass); end

  # source://code_ownership//lib/code_ownership.rb#30
  sig { params(file: ::String).returns(T.nilable(::CodeTeams::Team)) }
  def for_file(file); end

  # source://code_ownership//lib/code_ownership.rb#189
  sig { params(package: ::Packs::Pack).returns(T.nilable(::CodeTeams::Team)) }
  def for_package(package); end

  # source://code_ownership//lib/code_ownership.rb#50
  sig { params(team: T.any(::CodeTeams::Team, ::String)).returns(::String) }
  def for_team(team); end

  # source://code_ownership//lib/code_ownership.rb#92
  sig { params(autocorrect: T::Boolean, stage_changes: T::Boolean, files: T.nilable(T::Array[::String])).void }
  def validate!(autocorrect: T.unsafe(nil), stage_changes: T.unsafe(nil), files: T.unsafe(nil)); end

  class << self
    # Generally, you should not ever need to do this, because once your ruby process loads, cached content should not change.
    # Namely, the set of files, packages, and directories which are tracked for ownership should not change.
    # The primary reason this is helpful is for clients of CodeOwnership who want to test their code, and each test context
    # has different ownership and tracked files.
    #
    # source://code_ownership//lib/code_ownership.rb#198
    sig { void }
    def bust_caches!; end

    # source://code_ownership//lib/code_ownership.rb#206
    sig { returns(::CodeOwnership::Configuration) }
    def configuration; end

    # Given a backtrace from either `Exception#backtrace` or `caller`, find the
    # first owned file in it, useful for figuring out which file is being blamed.
    #
    # @param backtrace [Array<String>, nil]
    # @param excluded_teams [Array<::CodeTeams::Team>]
    # @return [Array<(::CodeTeams::Team, String)>, nil]
    #
    # source://code_ownership//lib/code_ownership.rb#118
    def first_owned_file_for_backtrace(backtrace, excluded_teams: T.unsafe(nil)); end

    # Given a backtrace from either `Exception#backtrace` or `caller`, find the
    # first line that corresponds to a file with assigned ownership
    #
    # @param backtrace [Array<String>, nil]
    # @param excluded_teams [Array<::CodeTeams::Team>]
    # @return [::CodeTeams::Team, nil]
    #
    # source://code_ownership//lib/code_ownership.rb#111
    def for_backtrace(backtrace, excluded_teams: T.unsafe(nil)); end

    # @param klass [T::Class[T.anything], Module, nil]
    # @return [::CodeTeams::Team, nil]
    #
    # source://code_ownership//lib/code_ownership.rb#172
    def for_class(klass); end

    # @param file [String]
    # @return [CodeTeams::Team, nil]
    #
    # source://code_ownership//lib/code_ownership.rb#30
    def for_file(file); end

    # @param package [Packs::Pack]
    # @return [::CodeTeams::Team, nil]
    #
    # source://code_ownership//lib/code_ownership.rb#189
    def for_package(package); end

    # @param team [CodeTeams::Team, String]
    # @return [String]
    #
    # source://code_ownership//lib/code_ownership.rb#50
    def for_team(team); end

    # source://code_ownership//lib/code_ownership.rb#81
    sig { params(filename: ::String).void }
    def remove_file_annotation!(filename); end

    # @param autocorrect [Boolean]
    # @param stage_changes [Boolean]
    # @param files [Array<String>, nil]
    # @return [void]
    #
    # source://code_ownership//lib/code_ownership.rb#92
    def validate!(autocorrect: T.unsafe(nil), stage_changes: T.unsafe(nil), files: T.unsafe(nil)); end

    private

    # @param backtrace [Array<String>, nil]
    # @return [Enumerable<Array<([::CodeTeams::Team, nil], String)>>]
    #
    # source://code_ownership//lib/code_ownership.rb#129
    def backtrace_with_ownership(backtrace); end
  end
end

class CodeOwnership::Cli
  class << self
    # For now, this just returns team ownership
    # Later, this could also return code ownership errors about that file.
    #
    # source://code_ownership//lib/code_ownership/cli.rb#75
    def for_file(argv); end

    # source://code_ownership//lib/code_ownership/cli.rb#122
    def for_team(argv); end

    # source://code_ownership//lib/code_ownership/cli.rb#9
    def run!(argv); end

    private

    # source://code_ownership//lib/code_ownership/cli.rb#32
    def validate!(argv); end
  end
end

# source://code_ownership//lib/code_ownership/configuration.rb#6
CodeOwnership::Configuration::DEFAULT_JS_PACKAGE_PATHS = T.let(T.unsafe(nil), Array)

# source://code_ownership//lib/code_ownership.rb#27
CodeOwnership::GlobsToOwningTeamMap = T.type_alias { T::Hash[::String, ::CodeTeams::Team] }

class CodeOwnership::InvalidCodeOwnershipConfigurationError < ::StandardError; end

# source://code_ownership//lib/code_ownership/private/glob_cache.rb#11
CodeOwnership::Private::GlobCache::CacheShape = T.type_alias { T::Hash[::String, T::Hash[::String, ::CodeTeams::Team]] }

# source://code_ownership//lib/code_ownership/private/glob_cache.rb#18
CodeOwnership::Private::GlobCache::FilesByMapper = T.type_alias { T::Hash[::String, T::Set[::String]] }

# source://code_ownership//lib/code_ownership/private/glob_cache.rb#9
CodeOwnership::Private::GlobCache::MapperDescription = T.type_alias { ::String }

# source://code_ownership//lib/code_ownership/private/ownership_mappers/directory_ownership.rb#12
CodeOwnership::Private::OwnershipMappers::DirectoryOwnership::CODEOWNERS_DIRECTORY_FILE_NAME = T.let(T.unsafe(nil), String)

# source://code_ownership//lib/code_ownership/private/ownership_mappers/file_annotations.rb#22
CodeOwnership::Private::OwnershipMappers::FileAnnotations::DESCRIPTION = T.let(T.unsafe(nil), String)

# source://code_ownership//lib/code_ownership/private/ownership_mappers/file_annotations.rb#21
CodeOwnership::Private::OwnershipMappers::FileAnnotations::TEAM_PATTERN = T.let(T.unsafe(nil), Regexp)

# source://code_ownership//lib/code_ownership/private/parse_js_packages.rb#13
CodeOwnership::Private::ParseJsPackages::METADATA = T.let(T.unsafe(nil), String)

# source://code_ownership//lib/code_ownership/private/parse_js_packages.rb#12
CodeOwnership::Private::ParseJsPackages::PACKAGE_JSON_NAME = T.let(T.unsafe(nil), String)

# source://code_ownership//lib/code_ownership/private/parse_js_packages.rb#11
CodeOwnership::Private::ParseJsPackages::ROOT_PACKAGE_NAME = T.let(T.unsafe(nil), String)

class CodeOwnership::Private::TeamPlugins::Github::GithubStruct < ::Struct
  # Returns the value of attribute do_not_add_to_codeowners_file
  #
  # @return [Object] the current value of do_not_add_to_codeowners_file
  def do_not_add_to_codeowners_file; end

  # Sets the attribute do_not_add_to_codeowners_file
  #
  # @param value [Object] the value to set the attribute do_not_add_to_codeowners_file to.
  # @return [Object] the newly set value
  def do_not_add_to_codeowners_file=(_); end

  # Returns the value of attribute team
  #
  # @return [Object] the current value of team
  def team; end

  # Sets the attribute team
  #
  # @param value [Object] the value to set the attribute team to.
  # @return [Object] the newly set value
  def team=(_); end

  class << self
    def [](*_arg0); end
    def inspect; end
    def keyword_init?; end
    def members; end
    def new(*_arg0); end
  end
end
