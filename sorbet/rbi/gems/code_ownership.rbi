# This file is autogenerated. Do not edit it by hand. Regenerate it with:
#   srb rbi gems

# typed: false
#
# If you would like to make changes to this file, great! Please create the gem's shim here:
#
#   https://github.com/sorbet/sorbet-typed/new/master?filename=lib/code_ownership/all/code_ownership.rbi
#
# code_ownership-1.39.0

module CodeOwnership
  def backtrace_with_ownership(*args, **, &blk); end
  def first_owned_file_for_backtrace(*args, **, &blk); end
  def for_backtrace(*args, **, &blk); end
  def for_class(*args, **, &blk); end
  def for_file(*args, **, &blk); end
  def for_package(*args, **, &blk); end
  def for_team(*args, **, &blk); end
  def self.backtrace_with_ownership(backtrace); end
  def self.bust_caches!(*args, **, &blk); end
  def self.configuration(*args, **, &blk); end
  def self.first_owned_file_for_backtrace(backtrace, excluded_teams: nil); end
  def self.for_backtrace(backtrace, excluded_teams: nil); end
  def self.for_class(klass); end
  def self.for_file(file); end
  def self.for_package(package); end
  def self.for_team(team); end
  def self.remove_file_annotation!(*args, **, &blk); end
  def self.validate!(autocorrect: nil, stage_changes: nil, files: nil); end
  def validate!(*args, **, &blk); end
  extend T::Helpers
  extend T::Private::Methods::MethodHooks
  extend T::Private::Methods::SingletonMethodHooks
  extend T::Sig
end
module CodeOwnership::Mapper
  def bust_caches!(*args, **, &blk); end
  def description(*args, **, &blk); end
  def globs_to_owner(*args, **, &blk); end
  def map_file_to_owner(*args, **, &blk); end
  def self.all(*args, **, &blk); end
  def self.included(arg0, &blk); end
  def self.to_glob_cache(*args, **, &blk); end
  def update_cache(*args, **, &blk); end
  extend T::Helpers
  extend T::Private::Abstract::Hooks
  extend T::Private::Methods::MethodHooks
  extend T::Private::Methods::SingletonMethodHooks
  extend T::Sig
end
module CodeOwnership::Validator
  def self.all(*args, **, &blk); end
  def self.included(arg0, &blk); end
  def validation_errors(*args, **, &blk); end
  extend T::Helpers
  extend T::Private::Abstract::Hooks
  extend T::Private::Methods::MethodHooks
  extend T::Private::Methods::SingletonMethodHooks
  extend T::Sig
end
module CodeOwnership::Private
  def self.bust_caches!(*args, **, &blk); end
  def self.configuration(*args, **, &blk); end
  def self.file_tracked?(*args, **, &blk); end
  def self.find_team!(*args, **, &blk); end
  def self.glob_cache(*args, **, &blk); end
  def self.load_configuration!(*args, **, &blk); end
  def self.path_from_klass(*args, **, &blk); end
  def self.tracked_files(*args, **, &blk); end
  def self.validate!(*args, **, &blk); end
  extend T::Private::Methods::MethodHooks
  extend T::Private::Methods::SingletonMethodHooks
  extend T::Sig
end
module CodeOwnership::Private::ExtensionLoader
  def self.load(*args, **, &blk); end
end
module CodeOwnership::Private::TeamPlugins
end
class CodeOwnership::Private::TeamPlugins::Ownership < CodeTeams::Plugin
  def owned_globs(*args, **, &blk); end
  def unowned_globs(*args, **, &blk); end
  extend T::Helpers
  extend T::Private::Methods::MethodHooks
  extend T::Private::Methods::SingletonMethodHooks
  extend T::Sig
end
class CodeOwnership::Private::TeamPlugins::Github < CodeTeams::Plugin
  def github(*args, **, &blk); end
  def self.require_github_teams?(*args, **, &blk); end
  def self.validation_errors(*args, **, &blk); end
  extend T::Helpers
  extend T::Private::Methods::MethodHooks
  extend T::Private::Methods::SingletonMethodHooks
  extend T::Sig
end
class CodeOwnership::Private::TeamPlugins::Github::GithubStruct < Struct
  def do_not_add_to_codeowners_file; end
  def do_not_add_to_codeowners_file=(_); end
  def self.[](*arg0); end
  def self.inspect; end
  def self.keyword_init?; end
  def self.members; end
  def self.new(*arg0); end
  def team; end
  def team=(_); end
end
class CodeOwnership::Private::CodeownersFile
  def self.actual_contents_lines(*args, **, &blk); end
  def self.expected_contents_lines(*args, **, &blk); end
  def self.path(*args, **, &blk); end
  def self.to_glob_cache(*args, **, &blk); end
  def self.update_cache!(*args, **, &blk); end
  def self.use_codeowners_cache?(*args, **, &blk); end
  def self.write!(*args, **, &blk); end
  extend T::Private::Methods::MethodHooks
  extend T::Private::Methods::SingletonMethodHooks
  extend T::Sig
end
module CodeOwnership::Private::ParseJsPackages
  def self.all(*args, **, &blk); end
  extend T::Private::Methods::MethodHooks
  extend T::Private::Methods::SingletonMethodHooks
  extend T::Sig
end
class CodeOwnership::Private::ParseJsPackages::Package < T::Struct
  def __t_props_generated_deserialize(*args, **); end
  def __t_props_generated_serialize(*args, **); end
  def directory(*args, **, &blk); end
  def metadata; end
  def name; end
  def self.from(*args, **, &blk); end
  def self.inherited(s); end
  extend T::Private::Methods::MethodHooks
  extend T::Private::Methods::SingletonMethodHooks
  extend T::Props::ClassMethods
  extend T::Props::Plugin::ClassMethods
  extend T::Props::Plugin::ClassMethods
  extend T::Props::Plugin::ClassMethods
  extend T::Props::Plugin::ClassMethods
  extend T::Props::Plugin::ClassMethods
  extend T::Props::Serializable::ClassMethods
  extend T::Sig
end
class CodeOwnership::Private::GlobCache
  def expanded_cache(*args, **, &blk); end
  def files_by_mappers_via_expanded_cache(*args, **, &blk); end
  def initialize(*args, **, &blk); end
  def mapper_descriptions_that_map_files(*args, **, &blk); end
  def raw_cache_contents(*args, **, &blk); end
  extend T::Private::Methods::MethodHooks
  extend T::Private::Methods::SingletonMethodHooks
  extend T::Sig
end
class CodeOwnership::Private::OwnerAssigner
  def self.assign_owners(*args, **, &blk); end
  extend T::Private::Methods::MethodHooks
  extend T::Private::Methods::SingletonMethodHooks
  extend T::Sig
end
module CodeOwnership::Private::Validations
end
class CodeOwnership::Private::Validations::FilesHaveOwners
  def validation_errors(*args, **, &blk); end
  extend T::Helpers
  extend T::Private::Methods::MethodHooks
  extend T::Private::Methods::SingletonMethodHooks
  extend T::Sig
  include CodeOwnership::Validator
end
class CodeOwnership::Private::Validations::GithubCodeownersUpToDate
  def validation_errors(*args, **, &blk); end
  extend T::Helpers
  extend T::Private::Methods::MethodHooks
  extend T::Private::Methods::SingletonMethodHooks
  extend T::Sig
  include CodeOwnership::Validator
end
class CodeOwnership::Private::Validations::FilesHaveUniqueOwners
  def validation_errors(*args, **, &blk); end
  extend T::Helpers
  extend T::Private::Methods::MethodHooks
  extend T::Private::Methods::SingletonMethodHooks
  extend T::Sig
  include CodeOwnership::Validator
end
module CodeOwnership::Private::OwnershipMappers
end
class CodeOwnership::Private::OwnershipMappers::FileAnnotations
  def bust_caches!(*args, **, &blk); end
  def description(*args, **, &blk); end
  def escaped_path_for_codeowners_file(*args, **, &blk); end
  def file_annotation_based_owner(*args, **, &blk); end
  def globs_to_owner(*args, **, &blk); end
  def map_file_to_owner(*args, **, &blk); end
  def remove_file_annotation!(*args, **, &blk); end
  def unescaped_path_for_codeowners_file(*args, **, &blk); end
  def update_cache(*args, **, &blk); end
  extend T::Private::Methods::MethodHooks
  extend T::Private::Methods::SingletonMethodHooks
  extend T::Sig
  include CodeOwnership::Mapper
end
class CodeOwnership::Private::OwnershipMappers::TeamGlobs
  def bust_caches!(*args, **, &blk); end
  def description(*args, **, &blk); end
  def find_overlapping_globs(*args, **, &blk); end
  def globs_to_owner(*args, **, &blk); end
  def map_file_to_owner(*args, **, &blk); end
  def map_files_to_owners(*args, **, &blk); end
  def update_cache(*args, **, &blk); end
  def validation_errors(*args, **, &blk); end
  extend T::Private::Methods::MethodHooks
  extend T::Private::Methods::SingletonMethodHooks
  extend T::Sig
  include CodeOwnership::Mapper
  include CodeOwnership::Validator
end
class CodeOwnership::Private::OwnershipMappers::TeamGlobs::MappingContext < T::Struct
  def __t_props_generated_deserialize(*args, **); end
  def __t_props_generated_serialize(*args, **); end
  def glob; end
  def self.inherited(s); end
  def team; end
  extend T::Props::ClassMethods
  extend T::Props::Plugin::ClassMethods
  extend T::Props::Plugin::ClassMethods
  extend T::Props::Plugin::ClassMethods
  extend T::Props::Plugin::ClassMethods
  extend T::Props::Plugin::ClassMethods
  extend T::Props::Serializable::ClassMethods
end
class CodeOwnership::Private::OwnershipMappers::TeamGlobs::GlobOverlap < T::Struct
  def __t_props_generated_deserialize(*args, **); end
  def __t_props_generated_serialize(*args, **); end
  def description(*args, **, &blk); end
  def mapping_contexts; end
  def self.inherited(s); end
  extend T::Private::Methods::MethodHooks
  extend T::Private::Methods::SingletonMethodHooks
  extend T::Props::ClassMethods
  extend T::Props::Plugin::ClassMethods
  extend T::Props::Plugin::ClassMethods
  extend T::Props::Plugin::ClassMethods
  extend T::Props::Plugin::ClassMethods
  extend T::Props::Plugin::ClassMethods
  extend T::Props::Serializable::ClassMethods
  extend T::Sig
end
class CodeOwnership::Private::OwnershipMappers::DirectoryOwnership
  def bust_caches!(*args, **, &blk); end
  def description(*args, **, &blk); end
  def get_team_from_codeowners_file_within_directory(*args, **, &blk); end
  def glob_for_codeowners_file(*args, **, &blk); end
  def globs_to_owner(*args, **, &blk); end
  def map_file_to_owner(*args, **, &blk); end
  def map_file_to_relevant_owner(*args, **, &blk); end
  def owner_for_codeowners_file(*args, **, &blk); end
  def update_cache(*args, **, &blk); end
  extend T::Private::Methods::MethodHooks
  extend T::Private::Methods::SingletonMethodHooks
  extend T::Sig
  include CodeOwnership::Mapper
end
class CodeOwnership::Private::OwnershipMappers::PackageOwnership
  def bust_caches!(*args, **, &blk); end
  def description(*args, **, &blk); end
  def globs_to_owner(*args, **, &blk); end
  def map_file_to_owner(*args, **, &blk); end
  def owner_for_package(*args, **, &blk); end
  def update_cache(*args, **, &blk); end
  extend T::Private::Methods::MethodHooks
  extend T::Private::Methods::SingletonMethodHooks
  extend T::Sig
  include CodeOwnership::Mapper
end
class CodeOwnership::Private::OwnershipMappers::JsPackageOwnership
  def bust_caches!(*args, **, &blk); end
  def description(*args, **, &blk); end
  def globs_to_owner(*args, **, &blk); end
  def map_file_to_owner(*args, **, &blk); end
  def map_file_to_relevant_package(*args, **, &blk); end
  def owner_for_package(*args, **, &blk); end
  def update_cache(*args, **, &blk); end
  extend T::Private::Methods::MethodHooks
  extend T::Private::Methods::SingletonMethodHooks
  extend T::Sig
  include CodeOwnership::Mapper
end
class CodeOwnership::Private::OwnershipMappers::TeamYmlOwnership
  def bust_caches!(*args, **, &blk); end
  def description(*args, **, &blk); end
  def globs_to_owner(*args, **, &blk); end
  def map_file_to_owner(*args, **, &blk); end
  def map_files_to_owners(*args, **, &blk); end
  def update_cache(*args, **, &blk); end
  extend T::Private::Methods::MethodHooks
  extend T::Private::Methods::SingletonMethodHooks
  extend T::Sig
  include CodeOwnership::Mapper
end
class CodeOwnership::Cli
  def self.for_file(argv); end
  def self.for_team(argv); end
  def self.run!(argv); end
  def self.validate!(argv); end
end
class CodeOwnership::Configuration < T::Struct
  def __t_props_generated_deserialize(*args, **); end
  def __t_props_generated_serialize(*args, **); end
  def codeowners_path; end
  def js_package_paths; end
  def owned_globs; end
  def raw_hash; end
  def require_github_teams; end
  def self.fetch(*args, **, &blk); end
  def self.inherited(s); end
  def self.js_package_paths(*args, **, &blk); end
  def skip_codeowners_validation; end
  def unbuilt_gems_path; end
  def unowned_globs; end
  extend T::Private::Methods::MethodHooks
  extend T::Private::Methods::SingletonMethodHooks
  extend T::Props::ClassMethods
  extend T::Props::Plugin::ClassMethods
  extend T::Props::Plugin::ClassMethods
  extend T::Props::Plugin::ClassMethods
  extend T::Props::Plugin::ClassMethods
  extend T::Props::Plugin::ClassMethods
  extend T::Props::Serializable::ClassMethods
  extend T::Sig
end
class CodeOwnership::InvalidCodeOwnershipConfigurationError < StandardError
end
