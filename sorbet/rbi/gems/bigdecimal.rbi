# This file is autogenerated. Do not edit it by hand. Regenerate it with:
#   srb rbi gems

# typed: false
#
# If you would like to make changes to this file, great! Please create the gem's shim here:
#
#   https://github.com/sorbet/sorbet-typed/new/master?filename=lib/bigdecimal/all/bigdecimal.rbi
#
# bigdecimal-3.2.3

module Kernel
  def BigDecimal(*arg0); end
  def self.BigDecimal(*arg0); end
end
class BigDecimal < Numeric
  def %(arg0); end
  def *(arg0); end
  def **(y); end
  def +(arg0); end
  def +@; end
  def -(arg0); end
  def -@; end
  def /(arg0); end
  def <(arg0); end
  def <=(arg0); end
  def <=>(arg0); end
  def ==(arg0); end
  def ===(arg0); end
  def >(arg0); end
  def >=(arg0); end
  def _decimal_shift(arg0); end
  def _dump(*arg0); end
  def abs; end
  def add(arg0, arg1); end
  def ceil(*arg0); end
  def clone; end
  def coerce(arg0); end
  def div(*arg0); end
  def divmod(arg0); end
  def dup; end
  def eql?(arg0); end
  def exponent; end
  def finite?; end
  def fix; end
  def floor(*arg0); end
  def frac; end
  def hash; end
  def infinite?; end
  def inspect; end
  def modulo(arg0); end
  def mult(arg0, arg1); end
  def n_significant_digits; end
  def nan?; end
  def nonzero?; end
  def power(y, prec = nil); end
  def precision; end
  def precision_scale; end
  def precs; end
  def quo(*arg0); end
  def remainder(arg0); end
  def round(*arg0); end
  def scale; end
  def self._load(arg0); end
  def self.double_fig; end
  def self.interpret_loosely(arg0); end
  def self.limit(*arg0); end
  def self.mode(*arg0); end
  def self.save_exception_mode; end
  def self.save_limit; end
  def self.save_rounding_mode; end
  def sign; end
  def split; end
  def sqrt(prec); end
  def sub(arg0, arg1); end
  def to_f; end
  def to_i; end
  def to_int; end
  def to_r; end
  def to_s(format = nil); end
  def truncate(*arg0); end
  def zero?; end
end
module BigDecimal::Internal
  def self.coerce_to_bigdecimal(x, prec, method_name); end
  def self.infinity_computation_result; end
  def self.nan_computation_result; end
  def self.validate_prec(prec, method_name, accept_zero: nil); end
end
module BigMath
  def self.exp(x, prec); end
  def self.log(x, prec); end
end
class Integer < Numeric
end
class Float < Numeric
end
class String
end
class Rational < Numeric
end
class Complex < Numeric
end
class NilClass
end
